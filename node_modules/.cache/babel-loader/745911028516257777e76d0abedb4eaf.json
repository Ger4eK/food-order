{"ast":null,"code":"var _jsxFileName = \"E:\\\\New Era\\\\React-Projects\\\\React - The Complete Guide (incl Hooks, React Router, Redux)\\\\food-order-app\\\\src\\\\components\\\\Cart\\\\Cart.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState } from 'react';\nimport CartContext from '../../store/cart-context';\nimport Modal from '../UI/Modal/Modal';\nimport classes from './Cart.module.css';\nimport CartItem from './CartItem/CartItem';\nimport Checkout from './Checkout/Checkout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Cart = props => {\n  _s();\n\n  const [isCheckingOut, setIsCheckingOut] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [didSubmit, setDidSubmit] = useState(false);\n  const cartCtx = useContext(CartContext);\n  const totalAmount = `$${cartCtx.totalAmount.toFixed(2)}`;\n  const hasItems = cartCtx.items.length > 0;\n\n  const cartItemRemoveHandler = id => {\n    cartCtx.removeItem(id);\n  };\n\n  const cartItemAddHandler = item => {\n    cartCtx.addItem({ ...item,\n      amount: 1\n    });\n  };\n\n  const cartItems = /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: classes['cart-items'],\n    children: cartCtx.items.map(item => /*#__PURE__*/_jsxDEV(CartItem, {\n      name: item.name,\n      amount: item.amount,\n      price: item.price,\n      onRemove: () => cartItemRemoveHandler(item.id),\n      onAdd: () => cartItemAddHandler(item)\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n\n  const orderHandler = userData => {\n    setIsCheckingOut(true);\n  }; //! Here we wanna wait for this fetch function to finish.\n\n\n  const submitOrderHandler = async userData => {\n    setIsSubmitting(true);\n    await fetch('https://react-http-9066a-default-rtdb.firebaseio.com/orders.json', {\n      method: 'POST',\n      body: JSON.stringify({\n        user: userData,\n        orderedItems: cartCtx.items\n      })\n    });\n    setIsSubmitting(false);\n    setDidSubmit(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: props.onClose,\n    children: [!isSubmitting && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Sending order data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }, this), isSubmitting && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [cartItems, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.total,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Total Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: totalAmount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), isCheckingOut && /*#__PURE__*/_jsxDEV(Checkout, {\n        onCancel: props.onClose,\n        submitOrderHandler: submitOrderHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), !isCheckingOut && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes['button--alt'],\n          onClick: props.onClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this), hasItems && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.button,\n          onClick: orderHandler,\n          children: \"Order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Cart, \"gKFZzOlBXtf6cCHavsZs+JZ0Ecs=\");\n\n_c = Cart;\nexport default Cart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"sources":["E:/New Era/React-Projects/React - The Complete Guide (incl Hooks, React Router, Redux)/food-order-app/src/components/Cart/Cart.jsx"],"names":["useContext","useState","CartContext","Modal","classes","CartItem","Checkout","Cart","props","isCheckingOut","setIsCheckingOut","isSubmitting","setIsSubmitting","didSubmit","setDidSubmit","cartCtx","totalAmount","toFixed","hasItems","items","length","cartItemRemoveHandler","id","removeItem","cartItemAddHandler","item","addItem","amount","cartItems","map","name","price","orderHandler","userData","submitOrderHandler","fetch","method","body","JSON","stringify","user","orderedItems","onClose","total","actions","button"],"mappings":"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","sourcesContent":["import { useContext, useState } from 'react';\r\nimport CartContext from '../../store/cart-context';\r\nimport Modal from '../UI/Modal/Modal';\r\nimport classes from './Cart.module.css';\r\nimport CartItem from './CartItem/CartItem';\r\nimport Checkout from './Checkout/Checkout';\r\n\r\nconst Cart = (props) => {\r\n  const [isCheckingOut, setIsCheckingOut] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [didSubmit, setDidSubmit] = useState(false);\r\n  const cartCtx = useContext(CartContext);\r\n\r\n  const totalAmount = `$${cartCtx.totalAmount.toFixed(2)}`;\r\n  const hasItems = cartCtx.items.length > 0;\r\n\r\n  const cartItemRemoveHandler = (id) => {\r\n    cartCtx.removeItem(id);\r\n  };\r\n  const cartItemAddHandler = (item) => {\r\n    cartCtx.addItem({ ...item, amount: 1 });\r\n  };\r\n\r\n  const cartItems = (\r\n    <ul className={classes['cart-items']}>\r\n      {cartCtx.items.map((item) => (\r\n        <CartItem\r\n          key={item.id}\r\n          name={item.name}\r\n          amount={item.amount}\r\n          price={item.price}\r\n          onRemove={() => cartItemRemoveHandler(item.id)}\r\n          onAdd={() => cartItemAddHandler(item)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n\r\n  const orderHandler = (userData) => {\r\n    setIsCheckingOut(true);\r\n  };\r\n\r\n  //! Here we wanna wait for this fetch function to finish.\r\n  const submitOrderHandler = async (userData) => {\r\n    setIsSubmitting(true);\r\n    await fetch(\r\n      'https://react-http-9066a-default-rtdb.firebaseio.com/orders.json',\r\n      {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          user: userData,\r\n          orderedItems: cartCtx.items,\r\n        }),\r\n      }\r\n    );\r\n    setIsSubmitting(false);\r\n    setDidSubmit(true);\r\n  };\r\n\r\n  return (\r\n    <Modal onClose={props.onClose}>\r\n      {!isSubmitting && <p>Sending order data...</p>}\r\n      {}\r\n      {isSubmitting && (\r\n        <>\r\n          {cartItems}\r\n          <div className={classes.total}>\r\n            <span>Total Amount</span>\r\n            <span>{totalAmount}</span>\r\n          </div>\r\n          {isCheckingOut && (\r\n            <Checkout\r\n              onCancel={props.onClose}\r\n              submitOrderHandler={submitOrderHandler}\r\n            />\r\n          )}\r\n          {!isCheckingOut && (\r\n            <div className={classes.actions}>\r\n              <button\r\n                className={classes['button--alt']}\r\n                onClick={props.onClose}\r\n              >\r\n                Close\r\n              </button>\r\n              {hasItems && (\r\n                <button className={classes.button} onClick={orderHandler}>\r\n                  Order\r\n                </button>\r\n              )}\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n"]},"metadata":{},"sourceType":"module"}