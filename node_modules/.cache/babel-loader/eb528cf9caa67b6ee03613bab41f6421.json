{"ast":null,"code":"var _jsxFileName = \"E:\\\\New Era\\\\React-Projects\\\\React - The Complete Guide (incl Hooks, React Router, Redux)\\\\food-order-app\\\\src\\\\components\\\\Meals\\\\AvailableMeals\\\\AvailableMeals.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport Card from '../../UI/Card/Card';\nimport MealItem from '../MealItem/MealItem';\nimport classes from './AvailableMeals.module.css'; //const DUMMY_MEALS = [\n//  {\n//    id: 'm1',\n//    name: 'Sushi',\n//    description: 'Finest fish and veggies',\n//    price: 22.99,\n//  },\n//  {\n//    id: 'm2',\n//    name: 'Schnitzel',\n//    description: 'A german specialty!',\n//    price: 16.5,\n//  },\n//  {\n//    id: 'm3',\n//    name: 'Barbecue Burger',\n//    description: 'American, raw, meaty',\n//    price: 12.99,\n//  },\n//  {\n//    id: 'm4',\n//    name: 'Green Bowl',\n//    description: 'Healthy...and green...',\n//    price: 18.99,\n//  },\n//];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = () => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [httpError, setHttpError] = useState();\n\n  const fetchMealsData = async () => {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('https://react-http-9066a-default-rtdb.firebaseio.com/meals.json');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      const loadedMeals = [];\n\n      for (const key in data) {\n        loadedMeals.push({\n          id: key,\n          name: data[key].name,\n          description: data[key].description,\n          price: data[key].price\n        });\n      }\n\n      setMeals(loadedMeals);\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoading(false);\n      setHttpError(error.message);\n    }\n  };\n\n  useEf; //useEffect(() => {\n  //  const fetchMealsData = async () => {\n  //    setIsLoading(true);\n  //    const response = await fetch(\n  //      'https://react-http-9066a-default-rtdb.firebaseio.com/meals.json'\n  //    );\n  //    if (!response.ok) {\n  //      throw new Error('Something went wrong!');\n  //    }\n  //    const data = await response.json();\n  //    const loadedMeals = [];\n  //    for (const key in data) {\n  //      loadedMeals.push({\n  //        id: key,\n  //        name: data[key].name,\n  //        description: data[key].description,\n  //        price: data[key].price,\n  //      });\n  //    }\n  //    setMeals(loadedMeals);\n  //    setIsLoading(false);\n  //  };\n  //  //! it's a promise and add to catch method on it - fetchMealsData().catch(...)\n  //  fetchMealsData().catch((error) => {\n  //    setIsLoading(false);\n  //    setHttpError(error.message);\n  //  });\n  //}, []);\n\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: classes.isLoading,\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 23\n      }, this), httpError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: classes.isError,\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AvailableMeals, \"1W8keB0nF/SfOAEksLrtz66ciX8=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["E:/New Era/React-Projects/React - The Complete Guide (incl Hooks, React Router, Redux)/food-order-app/src/components/Meals/AvailableMeals/AvailableMeals.jsx"],"names":["React","useState","useEffect","Card","MealItem","classes","AvailableMeals","meals","setMeals","isLoading","setIsLoading","httpError","setHttpError","fetchMealsData","response","fetch","ok","Error","data","json","loadedMeals","key","push","id","name","description","price","error","message","useEf","mealsList","map","meal","isError"],"mappings":"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","sourcesContent":["import { React, useState, useEffect } from 'react';\r\nimport Card from '../../UI/Card/Card';\r\nimport MealItem from '../MealItem/MealItem';\r\nimport classes from './AvailableMeals.module.css';\r\n\r\n//const DUMMY_MEALS = [\r\n//  {\r\n//    id: 'm1',\r\n//    name: 'Sushi',\r\n//    description: 'Finest fish and veggies',\r\n//    price: 22.99,\r\n//  },\r\n//  {\r\n//    id: 'm2',\r\n//    name: 'Schnitzel',\r\n//    description: 'A german specialty!',\r\n//    price: 16.5,\r\n//  },\r\n//  {\r\n//    id: 'm3',\r\n//    name: 'Barbecue Burger',\r\n//    description: 'American, raw, meaty',\r\n//    price: 12.99,\r\n//  },\r\n//  {\r\n//    id: 'm4',\r\n//    name: 'Green Bowl',\r\n//    description: 'Healthy...and green...',\r\n//    price: 18.99,\r\n//  },\r\n//];\r\n\r\nconst AvailableMeals = () => {\r\n  const [meals, setMeals] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [httpError, setHttpError] = useState();\r\n\r\n  const fetchMealsData = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(\r\n        'https://react-http-9066a-default-rtdb.firebaseio.com/meals.json'\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Something went wrong!');\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      const loadedMeals = [];\r\n      for (const key in data) {\r\n        loadedMeals.push({\r\n          id: key,\r\n          name: data[key].name,\r\n          description: data[key].description,\r\n          price: data[key].price,\r\n        });\r\n      }\r\n\r\n      setMeals(loadedMeals);\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      setHttpError(error.message);\r\n    }\r\n  };\r\n  useEf\r\n\r\n  //useEffect(() => {\r\n  //  const fetchMealsData = async () => {\r\n  //    setIsLoading(true);\r\n  //    const response = await fetch(\r\n  //      'https://react-http-9066a-default-rtdb.firebaseio.com/meals.json'\r\n  //    );\r\n\r\n  //    if (!response.ok) {\r\n  //      throw new Error('Something went wrong!');\r\n  //    }\r\n\r\n  //    const data = await response.json();\r\n\r\n  //    const loadedMeals = [];\r\n  //    for (const key in data) {\r\n  //      loadedMeals.push({\r\n  //        id: key,\r\n  //        name: data[key].name,\r\n  //        description: data[key].description,\r\n  //        price: data[key].price,\r\n  //      });\r\n  //    }\r\n\r\n  //    setMeals(loadedMeals);\r\n  //    setIsLoading(false);\r\n  //  };\r\n\r\n  //  //! it's a promise and add to catch method on it - fetchMealsData().catch(...)\r\n  //  fetchMealsData().catch((error) => {\r\n  //    setIsLoading(false);\r\n  //    setHttpError(error.message);\r\n  //  });\r\n  //}, []);\r\n\r\n  const mealsList = meals.map((meal) => (\r\n    <MealItem\r\n      id={meal.id}\r\n      key={meal.id}\r\n      name={meal.name}\r\n      description={meal.description}\r\n      price={meal.price}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <section className={classes.meals}>\r\n      <Card>\r\n        {isLoading && <p className={classes.isLoading}>Loading...</p>}\r\n        {httpError && <p className={classes.isError}>{httpError}</p>}\r\n        <ul>{mealsList}</ul>\r\n      </Card>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AvailableMeals;\r\n"]},"metadata":{},"sourceType":"module"}