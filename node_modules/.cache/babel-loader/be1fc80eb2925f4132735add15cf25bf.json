{"ast":null,"code":"var _jsxFileName = \"E:\\\\New Era\\\\React-Projects\\\\React - The Complete Guide (incl Hooks, React Router, Redux)\\\\food-order-app\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport CartContext from './cart-context'; //! This component is simply to manage the current context to data and provide that context to all components that want access to it.\n//! And now we can simply pass props.children between cart context provider. And this allows us to wrap any components that should get access to this context with this cart provider component.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartstate = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {}\n\n  return defaultCartstate;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartstate);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = item => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"WyYgp8/ATIagphpbiNtssWWNrqs=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["E:/New Era/React-Projects/React - The Complete Guide (incl Hooks, React Router, Redux)/food-order-app/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartstate","items","totalAmount","cartReducer","state","action","type","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","item","removeItemFromCartHandler","id","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;AAEA;;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B,CAE1B;;AAAC,SAAON,gBAAP;AACH,CAJD;;AAMA,MAAMO,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCZ,UAAU,CAChDK,WADgD,EAEhDH,gBAFgD,CAAlD;;AAKA,QAAMW,oBAAoB,GAAIC,IAAD,IAAU;AACrCF,IAAAA,kBAAkB,CAAC;AAAEJ,MAAAA,IAAI,EAAE,KAAR;AAAeM,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAlB;AACD,GAFD;;AAGA,QAAMC,yBAAyB,GAAID,IAAD,IAAU;AAC1CF,IAAAA,kBAAkB,CAAC;AAAEJ,MAAAA,IAAI,EAAE,QAAR;AAAkBQ,MAAAA,EAAE,EAAEA;AAAtB,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMC,WAAW,GAAG;AAClBd,IAAAA,KAAK,EAAEQ,SAAS,CAACR,KADC;AAElBC,IAAAA,WAAW,EAAEO,SAAS,CAACP,WAFL;AAGlBc,IAAAA,OAAO,EAAEL,oBAHS;AAIlBM,IAAAA,UAAU,EAAEJ;AAJM,GAApB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,cACGP,KAAK,CAACU;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAzBD;;GAAMX,Y;;KAAAA,Y;AA2BN,eAAeA,YAAf","sourcesContent":["import { useReducer } from 'react';\r\nimport CartContext from './cart-context';\r\n\r\n//! This component is simply to manage the current context to data and provide that context to all components that want access to it.\r\n\r\n//! And now we can simply pass props.children between cart context provider. And this allows us to wrap any components that should get access to this context with this cart provider component.\r\n\r\nconst defaultCartstate = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === 'ADD') {\r\n       \r\n  } return defaultCartstate;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartstate\r\n  );\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ type: 'ADD', item: item });\r\n  };\r\n  const removeItemFromCartHandler = (item) => {\r\n    dispatchCartAction({ type: 'REMOVE', id: id });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}